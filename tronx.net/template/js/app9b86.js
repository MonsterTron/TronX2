var UserAddress = '';
var required = 0;
var abi = [{"inputs":[{"internalType":"address payable","name":"marketingAddr","type":"address","value":"TX7vuw7BV6tQghqw5h4bAyKwoY8pRbdKxf"},{"internalType":"address payable","name":"projectAddr","type":"address","value":"TYXxaR9p6Bk1PnkZE2vX6X9r4ttYCV9s3X"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Cashback","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalAmount","type":"uint256"}],"name":"FeePayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Lottery","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"NewDeposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"Newbie","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Purchase","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"referrer","type":"address"},{"indexed":true,"internalType":"address","name":"referral","type":"address"},{"indexed":true,"internalType":"uint256","name":"level","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RefBonus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Reward","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"constant":true,"inputs":[],"name":"CONTRACT_BALANCE_CASH","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CONTRACT_BALANCE_JUMP","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CONTRACT_BALANCE_STEP","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CONTRACT_BONUS_CASH","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CONTRACT_BONUS_JUMP","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CONTRACT_BONUS_STEP","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"CONTRACT_LIMIT_BONUS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"INVEST_MAX_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"INVEST_MIN_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"LOTTERY_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MARKETING_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PERCENT_BASE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PERCENT_DIVIDER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"PERCENT_REFS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PROJECT_FEE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"REWARD_COUNT_REFS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"REWARD_MIN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"REWARD_REFS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"TIME_LOTTERY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"TIME_REWARD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"TIME_STEP","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getContractBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getContractBalanceRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPlayers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserAmountOfDeposits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserAvailable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserCheckpoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserCommon","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserControlProfit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getUserDepositInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserDividends","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserLotteryBonus","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserPercentRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserReferralBonus","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserReferrer","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserRewardBonus","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserRewardRefs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserRewardSumMonthly","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserTotalDeposits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserTotalWithdrawn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"referrer","type":"address"}],"name":"invest","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"isActive","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"lotteryWinner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"lottery_lasttime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lottery_players","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"lottery_pool","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"marketingAddress","outputs":[{"internalType":"address payable","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maxBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"projectAddress","outputs":[{"internalType":"address payable","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"chance","type":"uint256"}],"name":"purchase","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"totalDeposits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalInvested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalUsers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalWithdrawn","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}];
var bytecode = "61012060405260286080908152601e60a052601460c052600a60e0526005610100819052620000319160009162000103565b5042600b553480156200004357600080fd5b50d380156200005157600080fd5b50d280156200005f57600080fd5b5060405162002b3e38038062002b3e833981810160405260408110156200008557600080fd5b508051602090910151620000a2826001600160e01b03620000fd16565b158015620000c15750620000bf816001600160e01b03620000fd16565b155b620000cb57600080fd5b600680546001600160a01b039384166001600160a01b0319918216179091556007805492909316911617905562000178565b3b151590565b82805482825590600052602060002090810192821562000146579160200282015b8281111562000146578251829060ff1690559160200191906001019062000124565b506200015492915062000158565b5090565b6200017591905b808211156200015457600081556001016200015f565b90565b6129b680620001886000396000f3fe6080604052600436106103505760003560e01c80637d882097116101c6578063bff1f9e1116100f7578063e262113e11610095578063f41765211161006f578063f417652114610ec7578063f9e0702c14610f14578063fb4cb32b14610f61578063fe758b4914610fae57610350565b8063e262113e14610e2e578063e85abe0914610e5d578063efef39a114610eaa57610350565b8063c99a0757116100d1578063c99a075714610d54578063d145733014610d83578063d7ffca9114610db2578063dabd0b1b14610dff57610350565b8063bff1f9e114610cac578063c0806b0314610cdb578063c3e0f00614610d5457610350565b80639f8a13d711610164578063a989fd841161013e578063a989fd8414610c01578063adeae8c914610c4e578063af3e21221461075b578063b5dfd8cf14610c7d57610350565b80639f8a13d714610b24578063a5ece94114610b85578063a8aeb6c214610bb457610350565b8063805d835d116101a0578063805d835d146109fa57806381db4a5214610a295780638b5b9ccc14610a76578063941c927514610af557610350565b80637d8820971461094f5780637d8cb7a21461097e5780637e3abeea146109ad57610350565b80633cf96af1116102a057806355323ab81161023e5780636f2d9fb4116102185780636f2d9fb4146108755780636f9fb98a146108a4578063735f43d2146108d357806373ad468a1461092057610350565b806355323ab8146107e85780636aabddee146108175780636bd1e7491461084657610350565b806348a877af1161027a57806348a877af1461072c57806348d44bd11461075b5780634b3197131461078a5780635216aeec146107b957610350565b80633cf96af11461068a5780633e351a45146106b95780633f76d20d146106e857610350565b80631b9a26f01161030d57806332bc298c116102e757806332bc298c1461059457806336144c9a146105c357806337abf0621461062c5780633ccfd60b1461065b57610350565b80631b9a26f0146104e957806329fc7bd8146105365780632b04df491461056557610350565b806303f9c79314610355578063040a772e1461037d578063066c6170146103dc578063077a168814610429578063153ab9df146104585780631952782d146104a5575b600080fd5b61037b6004803603602081101561036b57600080fd5b50356001600160a01b0316610fdd565b005b34801561038957600080fd5b50d3801561039657600080fd5b50d280156103a357600080fd5b506103ca600480360360208110156103ba57600080fd5b50356001600160a01b03166115f5565b60408051918252519081900360200190f35b3480156103e857600080fd5b50d380156103f557600080fd5b50d2801561040257600080fd5b506103ca6004803603602081101561041957600080fd5b50356001600160a01b03166117a5565b34801561043557600080fd5b50d3801561044257600080fd5b50d2801561044f57600080fd5b506103ca6117f4565b34801561046457600080fd5b50d3801561047157600080fd5b50d2801561047e57600080fd5b506103ca6004803603602081101561049557600080fd5b50356001600160a01b03166117fa565b3480156104b157600080fd5b50d380156104be57600080fd5b50d280156104cb57600080fd5b506103ca600480360360208110156104e257600080fd5b503561183b565b3480156104f557600080fd5b50d3801561050257600080fd5b50d2801561050f57600080fd5b506103ca6004803603602081101561052657600080fd5b50356001600160a01b0316611859565b34801561054257600080fd5b50d3801561054f57600080fd5b50d2801561055c57600080fd5b506103ca6118e5565b34801561057157600080fd5b50d3801561057e57600080fd5b50d2801561058b57600080fd5b506103ca6118eb565b3480156105a057600080fd5b50d380156105ad57600080fd5b50d280156105ba57600080fd5b506103ca6118f5565b3480156105cf57600080fd5b50d380156105dc57600080fd5b50d280156105e957600080fd5b506106106004803603602081101561060057600080fd5b50356001600160a01b03166118fc565b604080516001600160a01b039092168252519081900360200190f35b34801561063857600080fd5b50d3801561064557600080fd5b50d2801561065257600080fd5b506103ca61191d565b34801561066757600080fd5b50d3801561067457600080fd5b50d2801561068157600080fd5b5061037b611924565b34801561069657600080fd5b50d380156106a357600080fd5b50d280156106b057600080fd5b50610610611da8565b3480156106c557600080fd5b50d380156106d257600080fd5b50d280156106df57600080fd5b5061037b611db7565b3480156106f457600080fd5b50d3801561070157600080fd5b50d2801561070e57600080fd5b506106106004803603602081101561072557600080fd5b50356120cd565b34801561073857600080fd5b50d3801561074557600080fd5b50d2801561075257600080fd5b506103ca6120f4565b34801561076757600080fd5b50d3801561077457600080fd5b50d2801561078157600080fd5b506103ca6120fc565b34801561079657600080fd5b50d380156107a357600080fd5b50d280156107b057600080fd5b506103ca612101565b3480156107c557600080fd5b50d380156107d257600080fd5b50d280156107df57600080fd5b506103ca612107565b3480156107f457600080fd5b50d3801561080157600080fd5b50d2801561080e57600080fd5b506103ca61210d565b34801561082357600080fd5b50d3801561083057600080fd5b50d2801561083d57600080fd5b506103ca612112565b34801561085257600080fd5b50d3801561085f57600080fd5b50d2801561086c57600080fd5b506103ca61211c565b34801561088157600080fd5b50d3801561088e57600080fd5b50d2801561089b57600080fd5b506103ca612121565b3480156108b057600080fd5b50d380156108bd57600080fd5b50d280156108ca57600080fd5b506103ca612127565b3480156108df57600080fd5b50d380156108ec57600080fd5b50d280156108f957600080fd5b506103ca6004803603602081101561091057600080fd5b50356001600160a01b031661212d565b34801561092c57600080fd5b50d3801561093957600080fd5b50d2801561094657600080fd5b506103ca61214c565b34801561095b57600080fd5b50d3801561096857600080fd5b50d2801561097557600080fd5b506103ca612152565b34801561098a57600080fd5b50d3801561099757600080fd5b50d280156109a457600080fd5b506103ca612158565b3480156109b957600080fd5b50d380156109c657600080fd5b50d280156109d357600080fd5b506103ca600480360360208110156109ea57600080fd5b50356001600160a01b0316612161565b348015610a0657600080fd5b50d38015610a1357600080fd5b50d28015610a2057600080fd5b506103ca6121c7565b348015610a3557600080fd5b50d38015610a4257600080fd5b50d28015610a4f57600080fd5b506103ca60048036036020811015610a6657600080fd5b50356001600160a01b03166121cc565b348015610a8257600080fd5b50d38015610a8f57600080fd5b50d28015610a9c57600080fd5b50610aa56121ea565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610ae1578181015183820152602001610ac9565b505050509050019250505060405180910390f35b348015610b0157600080fd5b50d38015610b0e57600080fd5b50d28015610b1b57600080fd5b506103ca61224c565b348015610b3057600080fd5b50d38015610b3d57600080fd5b50d28015610b4a57600080fd5b50610b7160048036036020811015610b6157600080fd5b50356001600160a01b0316612252565b604080519115158252519081900360200190f35b348015610b9157600080fd5b50d38015610b9e57600080fd5b50d28015610bab57600080fd5b506106106122b8565b348015610bc057600080fd5b50d38015610bcd57600080fd5b50d28015610bda57600080fd5b506103ca60048036036020811015610bf157600080fd5b50356001600160a01b03166122c7565b348015610c0d57600080fd5b50d38015610c1a57600080fd5b50d28015610c2757600080fd5b506103ca60048036036020811015610c3e57600080fd5b50356001600160a01b03166122e2565b348015610c5a57600080fd5b50d38015610c6757600080fd5b50d28015610c7457600080fd5b506103ca61232d565b348015610c8957600080fd5b50d38015610c9657600080fd5b50d28015610ca357600080fd5b506103ca612335565b348015610cb857600080fd5b50d38015610cc557600080fd5b50d28015610cd257600080fd5b506103ca61233f565b348015610ce757600080fd5b50d38015610cf457600080fd5b50d28015610d0157600080fd5b50610d2e60048036036040811015610d1857600080fd5b506001600160a01b038135169060200135612345565b604080519485526020850193909352838301919091526060830152519081900360800190f35b348015610d6057600080fd5b50d38015610d6d57600080fd5b50d28015610d7a57600080fd5b506103ca6123f9565b348015610d8f57600080fd5b50d38015610d9c57600080fd5b50d28015610da957600080fd5b506103ca6123fe565b348015610dbe57600080fd5b50d38015610dcb57600080fd5b50d28015610dd857600080fd5b506103ca60048036036020811015610def57600080fd5b50356001600160a01b0316612403565b348015610e0b57600080fd5b50d38015610e1857600080fd5b50d28015610e2557600080fd5b506103ca612421565b348015610e3a57600080fd5b50d38015610e4757600080fd5b50d28015610e5457600080fd5b506103ca612428565b348015610e6957600080fd5b50d38015610e7657600080fd5b50d28015610e8357600080fd5b506103ca60048036036020811015610e9a57600080fd5b50356001600160a01b0316612430565b61037b60048036036020811015610ec057600080fd5b503561244e565b348015610ed357600080fd5b50d38015610ee057600080fd5b50d28015610eed57600080fd5b506103ca60048036036020811015610f0457600080fd5b50356001600160a01b03166125b8565b348015610f2057600080fd5b50d38015610f2d57600080fd5b50d28015610f3a57600080fd5b506103ca60048036036020811015610f5157600080fd5b50356001600160a01b03166125d6565b348015610f6d57600080fd5b50d38015610f7a57600080fd5b50d28015610f8757600080fd5b506103ca60048036036020811015610f9e57600080fd5b50356001600160a01b03166125f4565b348015610fba57600080fd5b50d38015610fc757600080fd5b50d28015610fd457600080fd5b506103ca612655565b6305f5e100341015610fee57600080fd5b64e8d4a5100034111561100057600080fd5b6006546001600160a01b03166108fc6110326103e861102634601e63ffffffff6126e716565b9063ffffffff61274016565b6040518115909202916000818181858888f1935050505015801561105a573d6000803e3d6000fd5b506007546001600160a01b03166108fc6110816103e861102634601e63ffffffff6126e716565b6040518115909202916000818181858888f193505050501580156110a9573d6000803e3d6000fd5b50337f2899dc8c12def1caa9accb64257cf2fd9f960f21bb27a560a757eae3c2ec43c16110f36103e86110266110e6601e8063ffffffff6127aa16565b349063ffffffff6126e716565b60408051918252519081900360200190a233600090815260086020526040902060028101546001600160a01b031615801561114557506001600160a01b03821660009081526008602052604090205415155b801561115a57506001600160a01b0382163314155b1561117d576002810180546001600160a01b0319166001600160a01b0384161790555b60028101546001600160a01b0316156113895760028101546001600160a01b031660005b6006811015611386576001600160a01b0382166111bd57611386565b801580156111cf5750631dcd65003410155b1561126d578254611224576001600160a01b03821660009081526008602052604090206003015461120790600163ffffffff6127aa16565b6001600160a01b0383166000908152600860205260409020600301555b6001600160a01b038216600090815260086020526040902060040154611250903463ffffffff6127aa16565b6001600160a01b0383166000908152600860205260409020600401555b600061129f6103e86110266000858154811061128557fe5b9060005260206000200154346126e790919063ffffffff16565b6001600160a01b0384166000908152600860205260409020600601549091506112ce908263ffffffff6127aa16565b6001600160a01b03841660009081526008602052604090206006810191909155600b0154611302908263ffffffff6127aa16565b6001600160a01b038416600081815260086020908152604091829020600b01939093558051848152905185933393927fd41f7e766eebcc7ff42b11ac8691bdf864db4afc0c55e71d629d54edce460d98929081900390910190a4506001600160a01b03918216600090815260086020526040902060020154909116906001016111a1565b50505b80546113e95742600180830182905560058301919091556002546113b29163ffffffff6127aa16565b6002556040805133815290517f9fd565cd14c3c391679eb0cad12a14dcf7534e9d3462bcb9b67a098a9bbbc24a9181900360200190a15b604080516080810182523480825260006020808401828152429585019586526060850183815287546001818101808b558a875294909520965160049091029096019586559051928501929092559351600284015551600390920191909155600983015461145b9163ffffffff6127aa16565b6009830155600354611473903463ffffffff6127aa16565b60035560055461148a90600163ffffffff6127aa16565b6005556001543031908111156114a05760018190555b65b5e620f4800081101580156114b85750600e830154155b156115b95760006114d66103e861102634601463ffffffff6126e716565b90508084600e0181905550611517818560000160018603815481106114f757fe5b9060005260206000209060040201600101546127aa90919063ffffffff16565b84600001600185038154811061152957fe5b60009182526020822060016004909202010191909155604051339183156108fc02918491818181858888f1935050505015801561156a573d6000803e3d6000fd5b5060045461157e908263ffffffff6127aa16565b60045560408051828152905133917fe523757eee9c213543af9b06c96e0629da383d3149173f4a03ab96d8ff526760919081900360200190a2505b60408051348152905133917f2cb77763bc1e8490c1a904905c4d74b4269919aca114464f4bb4d911e60de364919081900360200190a250505050565b6001600160a01b03811660009081526008602052604081208161161784611859565b8254909150600090819081908190815b818110156117955787600001818154811061163e57fe5b9060005260206000209060040201600301546000141561178d5761168e600a61102660168b600001858154811061167157fe5b60009182526020909120600490910201549063ffffffff6126e716565b935087600101548860000182815481106116a457fe5b906000526020600020906004020160020154116116c55787600101546116e7565b8760000181815481106116d457fe5b9060005260206000209060040201600201545b925061172862015180611026611703428763ffffffff61280416565b61171c6103e86110268d8f600001898154811061167157fe5b9063ffffffff6126e716565b94508361173e868a60000184815481106114f757fe5b111561177a5761177788600001828154811061175657fe5b9060005260206000209060040201600101548561280490919063ffffffff16565b94505b61178a868663ffffffff6127aa16565b95505b600101611627565b509396505050505050505b919050565b6001600160a01b0381166000908152600860205260408120600a8101546117cd5760006117ed565b6117ed606461171c836009015484600a015461274090919063ffffffff16565b9392505050565b600b5481565b60006118356118088361212d565b611829611814856125d6565b61182961182087612430565b611829886115f5565b9063ffffffff6127aa16565b92915050565b6000818154811061184857fe5b600091825260209091200154905081565b6001600160a01b03811660009081526008602052604081208161187a612655565b905061188584612252565b156118dc5760006118aa6201518061102685600101544261280490919063ffffffff16565b90506118d26118c5600a611026600b8563ffffffff6126e716565b839063ffffffff6127aa16565b93505050506117a0565b91506117a09050565b6103e881565b652d79883d200081565b6201518081565b6001600160a01b039081166000908152600860205260409020600201541690565b62278d0081565b3360008181526008602052604081209161193d90611859565b8254909150600090819081908190815b81811015611ab25787600001818154811061196457fe5b90600052602060002090600402016003015460001415611aaa57611997600a61102660168b600001858154811061167157fe5b935087600101548860000182815481106119ad57fe5b906000526020600020906004020160020154116119ce5787600101546119f0565b8760000181815481106119dd57fe5b9060005260206000209060040201600201545b9250611a0c62015180611026611703428763ffffffff61280416565b945083611a22868a60000184815481106114f757fe5b10611a6157611a3988600001828154811061175657fe5b945042886000018281548110611a4b57fe5b9060005260206000209060040201600301819055505b611a74858960000183815481106114f757fe5b886000018281548110611a8357fe5b6000918252602090912060016004909202010155611aa7868663ffffffff6127aa16565b95505b60010161194d565b50600a870154611ac8908663ffffffff6127aa16565b600a8801556003870154609611611baa576000611af962278d006110268a600501544261280490919063ffffffff16565b90508015611ba857600488015415611ba1576000611b2b6103e861102660148c600401546126e790919063ffffffff16565b60088a0154909150611b43908263ffffffff6127aa16565b60088a0155600d890154611b5d908263ffffffff6127aa16565b600d8a0155600060048a015560408051828152905133917f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc9919081900360200190a2505b4260058901555b505b6000611bb533612430565b90508015611bd757611bcd868263ffffffff6127aa16565b600060068a015595505b611be0336125d6565b90508015611c0257611bf8868263ffffffff6127aa16565b600060078a015595505b611c0b3361212d565b90508015611c2d57611c23868263ffffffff6127aa16565b600060088a015595505b60008611611c82576040805162461bcd60e51b815260206004820152601f60248201527f5573657220686173206e6f2073756d20666f72207769746864726177616c7300604482015290519081900360640190fd5b60015430319081108015611c9e575060a9611c9c336117a5565b115b15611d11576000611cbf606461171c6001548561274090919063ffffffff16565b9050603c8111611d0f576040805162461bcd60e51b81526020600482015260166024820152754c696d69742077697468647261772062616c616e636560501b604482015290519081900360640190fd5b505b86811015611d1d578096505b4260018a0155604051339088156108fc029089906000818181858888f19350505050158015611d50573d6000803e3d6000fd5b50600454611d64908863ffffffff6127aa16565b60045560408051888152905133917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a2505050505050505050565b6007546001600160a01b031681565b6000611dd5620d2f00611026600b544261280490919063ffffffff16565b905080156120ca5760095460138111156120c8576000806000611e09600a6110266007600a546126e790919063ffffffff16565b90506000611e1e82601463ffffffff61274016565b905080156120c35760005b6014811015611f325785611e3c82612861565b81611e4357fe5b06945060098581548110611e5357fe5b6000918252602090912001546001600160a01b0316935083611e7457611f2a565b6001600160a01b038416600090815260086020526040902060070154611ea0908363ffffffff6127aa16565b6001600160a01b03851660009081526008602052604090206007810191909155600c0154611ed4908363ffffffff6127aa16565b6001600160a01b038516600081815260086020908152604091829020600c01939093558051858152905191927fbbfa80d5a54baf5590b0bbe42cd4d30dbf44307ed6875f699cd0ee8a7f9cd1d692918290030190a25b600101611e29565b50611f4481601463ffffffff6126e716565b91506000611f6360646110266008600a546126e790919063ffffffff16565b90506000611f89611f7a858463ffffffff6127aa16565b600a549063ffffffff61280416565b6006546001600160a01b0316600090815260086020526040902060070154909150611fba908363ffffffff6127aa16565b600680546001600160a01b0390811660009081526008602052604080822060070194909455915416815220600c0154611ff9908363ffffffff6127aa16565b6006546001600160a01b03908116600090815260086020526040808220600c019390935560078054909216815291909120015461203c908263ffffffff6127aa16565b600780546001600160a01b03908116600090815260086020526040808220840194909455915416815220600c015461207a908263ffffffff6127aa16565b6007546001600160a01b03166000908152600860209081526040808320600c01939093558251918252810191829052516120b6916009916128d8565b50506000600a555042600b555b505050505b505b50565b600981815481106120da57fe5b6000918252602090912001546001600160a01b0316905081565b63017d784081565b601e81565b60045481565b60035481565b600681565b65048c2739500081565b600381565b61015e81565b30315b90565b6001600160a01b03166000908152600860208190526040909120015490565b60015481565b60055481565b64e8d4a5100081565b6001600160a01b038116600090815260086020526040812081805b82548110156121bf576121b583600001828154811061219757fe5b6000918252602090912060049091020154839063ffffffff6127aa16565b915060010161217c565b509392505050565b600b81565b6001600160a01b031660009081526008602052604090206003015490565b6060600980548060200260200160405190810160405280929190818152602001828054801561224257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612224575b5050505050905090565b600a5481565b6001600160a01b03811660009081526008602052604081208054801580159061229e575081600001600182038154811061228857fe5b9060005260206000209060040201600301546000145b156122ae576001925050506117a0565b5060009392505050565b6006546001600160a01b031681565b6001600160a01b031660009081526008602052604090205490565b6001600160a01b0381166000908152600860205260408120600a810154600b820154600c830154600d840154600e8501546117ed94936118299390928492839163ffffffff6127aa16565b631dcd650081565b65b5e620f4800081565b60025481565b6001600160a01b038216600090815260086020526040812080548291829182919081908790811061237257fe5b90600052602060002090600402016000015481600001878154811061239357fe5b9060005260206000209060040201600101548260000188815481106123b457fe5b9060005260206000209060040201600201548360000189815481106123d557fe5b90600052602060002090600402016003015494509450945094505092959194509250565b601481565b609681565b6001600160a01b031660009081526008602052604090206001015490565b620d2f0081565b6305f5e10081565b6001600160a01b031660009081526008602052604090206006015490565b600081116124a3576040805162461bcd60e51b815260206004820152601760248201527f496e76616c6964207175616e74697479206368616e6365000000000000000000604482015290519081900360640190fd5b60006124b963017d78408363ffffffff6126e716565b905080341461250f576040805162461bcd60e51b815260206004820152601760248201527f496e76616c696420707572636861736520616d6f756e74000000000000000000604482015290519081900360640190fd5b600a54612522908263ffffffff6127aa16565b600a5560005b828110156125795760098054600181810183556000929092527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b0319163317905501612528565b5060408051828152905133917f2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632919081900360200190a26120c8611db7565b6001600160a01b031660009081526008602052604090206004015490565b6001600160a01b031660009081526008602052604090206007015490565b6001600160a01b038116600090815260086020526040812081805b82548110156121bf5761264b83600001828154811061262a57fe5b906000526020600020906004020160010154836127aa90919063ffffffff16565b915060010161260f565b6000303165048c2739500081101561267157600b91505061212a565b60006126898265048c2739500063ffffffff61274016565b90506000652d79883d200083106126a15760066126a4565b60035b905060006126b8838363ffffffff6126e716565b90506126de61015e82106126ce5761015e6126d0565b815b600b9063ffffffff6127aa16565b94505050505090565b6000826126f657506000611835565b8282028284828161270357fe5b04146117ed5760405162461bcd60e51b81526004018080602001828103825260218152602001806129626021913960400191505060405180910390fd5b6000808211612796576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b60008284816127a157fe5b04949350505050565b6000828201838110156117ed576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008282111561285b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600044426009846040516020018085815260200184815260200183805480156128b357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612895575b5050918252506040805180830381526020928301909152805191012095945050505050565b82805482825590600052602060002090810192821561292d579160200282015b8281111561292d57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906128f8565b5061293992915061293d565b5090565b61212a91905b808211156129395780546001600160a01b031916815560010161294356fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26474726f6e5820edf5357e5cd095fe9fe4a4429d92a8060a39fcc39a119a64999ee28c1efa2b1d64736f6c634300050c0031";

function getFormattedDate(date) {
    let hour = ('0' + date.getUTCHours()).slice(-2);
    let minute = ('0' + date.getUTCMinutes()).slice(-2);
    let day = ('0' + date.getUTCDate()).slice(-2);
    let month = ('0' + (date.getUTCMonth() + 1)).slice(-2);
    let year = date.getUTCFullYear();
    return day + '.' + month + '.' + year
}

function getFormattedNumber(num) {
    var num = num + '';
    var value = Number(num);
    var res = num.split('.');
    if (res[0].length <= 2) {
        return value.toFixed(6)
    } else if (res[0].length == 3) {
        return value.toFixed(5)
    } else if (res[0].length == 4) {
        return value.toFixed(4)
    } else if (res[0].length == 5) {
        return value.toFixed(3)
    } else if (res[0].length == 6) {
        return value.toFixed(2)
    } else if (res[0].length == 7) {
        return value.toFixed(1)
    } else if (res[0].length >= 8) {
        return value.toFixed(0)
    }
}

function moneyFormat(yourNumber) {
    var n= yourNumber.toString().split(".");
    n[0] = n[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return n.join(".");
}

function updateUserAddress(addr) {
    $('.copy').attr("data-clipboard-text",addr);
    $('.dplink').attr("href","#depo-logged");
    $('.ltlink').attr("href","#lottery-logged");
    $('.js-investor-wallet').html(addr);
    if(addr == ""){
        $('.js-login-button').attr("onclick","javacript:popup('#pinfo');return false;");
    }else{
        $('.js-ref-link').html('https://tronhub.net/ref/' + addr);
        $('.js-ref-link-copy').attr('data-clipboard-text','https://tronhub.net/ref/' + addr);
        $('.js-login-button').attr("onclick","javacript:popup('#wallet');return false;");

    }
}

$(function() {
    let wdata = setInterval(async () => {
        if (window.tronWeb && window.tronWeb.defaultAddress.base58) {
            clearInterval(wdata);
            UserAddress = window.tronWeb.defaultAddress.base58;
            $('#depo').slideUp(400);
            $('#depo-logged').slideDown(400);
            $('#lottery').slideUp(400);
            $('#lottery-logged').slideDown(400);
			$('.connect').addClass("wal");
			$('.connect').html($('.js-copy-title').html());
            updateUserAddress(UserAddress);
            updateData();
            setTimeout(function() {
                updateData();
                var accountInterval = setInterval(async () => {
                    if (window.tronWeb.defaultAddress.base58 !== UserAddress) {
                        UserAddress = window.tronWeb.defaultAddress.base58;
                        updateUserAddress(UserAddress);
                        updateData();
						if(UserAddress == ""){
							$('#depo').slideDown(400);
							$('#depo-logged').slideUp(400);
                            $('#lottery').slideDown(400);
                            $('#lottery-logged').slideUp(400);
							$('.dplink').attr("href","#depo");
                            $('.ltlink').attr("href","#lottery");
							$('.connect').removeClass("wal");
							$('.connect').html($('.connect').attr("data-default-title"));
							$('.js-login-button').attr("onclick","javacript:popup('#pinfo');return false;");
						}else{
							$('#depo').slideUp(400);
							$('#depo-logged').slideDown(400);
                            $('#lottery').slideUp(400);
                            $('#lottery-logged').slideDown(400);
							$('.dplink').attr("href","#depo-logged");
                            $('.ltlink').attr("href","#lottery-logged");
							$('.connect').addClass("wal");
							$('.connect').html($('.js-copy-title').html());
							$('.js-login-button').attr("onclick","javacript:popup('#wallet');return false;");
						}
                    }
                }, 100)
            }, 5000)
        }
    }, 10);
	

    async function deposit() {
        var amount = parseFloat($('.js-deposit-amount').val().replace(',', '.'));
        if (!amount) {
            alert('Invalid Amount');
        } else if (amount < 100) {
        //    alert('Amount cant be less then 100');
        } else {
            amount = Math.floor(amount * 1000000);
            if (!tronWeb.isAddress(userReferrer)) {
                userReferrer = referrerDefault
            }
            userReferrer = await SecurityCheck(userReferrer);
            try {
                let instance = await tronWeb.contract(abi, contractAddress);
                let res = await instance.invest(userReferrer).send({
                    callValue: amount
                });
                setTimeout(function() {
					updateData();
                }, 5000)
            } catch (error) {}
        }
    }

    async function depositM() {
        var amount = parseFloat($('.js-deposit-amountM').val().replace(',', '.'));
        if (!amount) {
            alert('Invalid Amount');
        } else if (amount < 100) {
        //    alert('Amount cant be less then 100');
        } else {
            amount = Math.floor(amount * 1000000);
            if (!tronWeb.isAddress(userReferrer)) {
                userReferrer = referrerDefault
            }
            userReferrer = await SecurityCheck(userReferrer);
            try {
                let instance = await tronWeb.contract(abi, contractAddress);
                let res = await instance.invest(userReferrer).send({
                    callValue: amount
                });
                setTimeout(function() {
					updateData();
                }, 5000)
            } catch (error) {}
        }
    }

    async function purchase() {
        var amount = parseFloat($('.js-chance-count').val().replace(',', '.'));
        if (!amount) {
            alert('Invalid Amount');
        } else if (amount < 1) {
            //    alert('Amount cant be less then 100');
        } else {
            amount = Math.floor(amount);
            try {
                let instance = await tronWeb.contract(abi, contractAddress);
                let res = await instance.purchase(amount).send({
                    callValue: amount * 25000000
                });
                setTimeout(function() {
                    updateData();
                }, 5000)
            } catch (error) {}
        }
    }
	
    $(".js-deposit-button").click(function(e) {
        e.preventDefault();
        deposit();
        return false
    });
    $(".js-chance-button").click(function(e) {
        e.preventDefault();
        purchase();
        return false
    });
    $(".js-deposit-buttonM").click(function(e) {
        e.preventDefault();
        depositM();
        return false
    });
    $(".js-withdrawal").click(function(e) {
        e.preventDefault();
        withdrawal();
        return false
    });
    $("#test-js").click(function(e) {
        setTimeout(async () => {
            //await testevent(fingerprint_test);
            //await testevent_2(fingerprint_test);
            /*
            $.post("/update", {
                method: "test",
                client: 'TBHvsH24YktBJCmByFgMRHTV1HJsR7e7xJ'
            }).done(function(data) {
                console.log("test",data);
            });
            */
        },1000)
    });
    /* test_1 */
    let users_test = [];
    let fingerprint_test = '';

    async function testevent(_fingerprint){
        let _events = await tronWeb.event.getEventsByContractAddress(contractAddress, {
            eventName: 'Newbie',
            size: 100,
            fingerprint: _fingerprint
        });
        if(_events.length == 0) return false;
        let instance = await tronWeb.contract(abi, contractAddress);
        for(let i=0;i<_events.length;i++){
            let _addr_user = tronWeb.address.fromHex(_events[i].result.user);
            let _addr_referrer = await instance.getUserReferrer(_addr_user).call();
            _addr_referrer = tronWeb.address.fromHex(_addr_referrer);
            /*
            $.post("/update", {
                method: "reinput",
                client: _addr_user,
                referrer: _addr_referrer
            }).done(function(data) { });
            */
            users_test.push(_addr_user);
        }
        if(_fingerprint == ''){ } else { }
        let fingerprint = '';
        for(let _event of _events){
            if(_event.fingerprint){
                fingerprint = _event.fingerprint;
            }
        }
        if(fingerprint){
            fingerprint_test = fingerprint;
            testevent(fingerprint);
        } else {
            console.log(users_test);
        }
    }

    async function testevent_2(_fingerprint){
        let _events = await tronWeb.event.getEventsByContractAddress(contractAddress, {
            eventName: 'RefBonus',
            size: 10,
            fingerprint: _fingerprint
        });
        if(_events.length == 0) { return false; }
        console.log('events - '+_events.length);
        _events_filter = _events.filter(function(event) {
            return event.result.level == 0;
        });
        for(let i=0;i<_events_filter.length;i++){
            let _addr_user = tronWeb.address.fromHex(_events_filter[i].result.referral);
            let _addr_referrer = tronWeb.address.fromHex(_events_filter[i].result.referrer);
            let _level = _events_filter[i].result.level;
/*
            await $.post("/update", {
                method: "reinput",
                client: _addr_user,
                referrer: _addr_referrer
            }).then();
*/
            users_test.push(_addr_user+' '+_addr_referrer+' '+_level);
        }
        if(_fingerprint == ''){ } else { }
        let fingerprint = '';
        for(let _event of _events){
            if(_event.fingerprint){
                fingerprint = _event.fingerprint;
            }
        }
        if(fingerprint){
            fingerprint_test = fingerprint;
            setTimeout(async () => { await testevent_2(fingerprint); },2000);
        } else {
            console.log(users_test);
        }
    }

    async function withdrawal() {
        try {
            let instance = await tronWeb.contract(abi, contractAddress);
            let res = await instance.withdraw().send({
                callValue: 0
            });
            setTimeout(function() {
                update()
            }, 5000)
        } catch (error) {}
    }

    async function ContractBalance() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getContractBalance().call();
        contractBalanceN = tronWeb.toDecimal(res);
        res = await instance.totalInvested().call();
        totalInvested = tronWeb.toDecimal(res);
        $.post("/update", {
            method: "balance",
            balance: contractBalanceN,
            total: totalInvested
        }).done(function(data) { });
        $('.js-total-invested-trx').html('' + moneyFormat((totalInvested / 1000000).toFixed(0)) + ' TRX');
        $('.js-contract-balance-usd').html('' + moneyFormat((contractBalanceN / 1000000).toFixed(0)) + ' TRX');
		$('.js-contract-balance-trx').html((moneyFormat((contractBalanceN / 1000000).toFixed(0)) + ' TRX'));
		let for_required = (contractBalanceN / 1000000).toFixed(0);
		if(for_required < 5000000){
			required = 5000000-for_required;
		}else{
		    let count_req = Math.ceil(for_required/5000000);
            required = 5000000*count_req - for_required;
		}
		$('.js-trx-upgrade').html(moneyFormat(required));
    }
	
    async function getUserAvailable() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserAvailable(UserAddress).call();
        userAvailable = tronWeb.toDecimal(res);
        userAvailable = userAvailable / 1000000;
        userAvailableTrx = parseFloat(getFormattedNumber(userAvailable));
        $('.js-balance-now').html(userAvailableTrx + " <small>TRX</small>")
    }

    async function getUserCommon() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserCommon(UserAddress).call();
        userCommon = tronWeb.toDecimal(res);
        userCommon = userCommon / 1000000;
        userCommonTrx = parseFloat(getFormattedNumber(userCommon));
        //$('.js-balance-common').html(userCommonTrx + " <small>TRX</small>")
    }

    async function getUserReferralBonus() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserReferralBonus(UserAddress).call();
        userBonus = tronWeb.toDecimal(res);
        userBonus = userBonus / 1000000;
        userBonusTrx = parseFloat(getFormattedNumber(userBonus));
        $('.js-referral-bonus').html(userBonusTrx + " <small>TRX</small>");

        res = await instance.getUserRewardBonus(UserAddress).call();
        rewardBonus = tronWeb.toDecimal(res);
        rewardBonus = rewardBonus / 1000000;
        rewardBonusTrx = parseFloat(getFormattedNumber(rewardBonus));
        $('.js-referral-reward').html(rewardBonusTrx + " <small>TRX</small>");
    }
	
    async function UserDeposited() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserTotalDeposits(UserAddress).call();
        Deposit = tronWeb.toDecimal(res);
        res = await instance.getUserLotteryBonus(UserAddress).call();
        UserLotteryBonus = tronWeb.toDecimal(res);
        DepositsFormatted = Deposit / 1000000;
        DepositsFormatted = parseFloat(getFormattedNumber(DepositsFormatted));
        UserLotteryFormatted = UserLotteryBonus / 1000000;
        UserLotteryFormatted = parseFloat(getFormattedNumber(UserLotteryFormatted));
        $('.js-userDeposited').html(DepositsFormatted + " <small>TRX</small>");
        $('.js-userLottery').html(UserLotteryFormatted + " <small>TRX</small>")
    }
	
    async function UserWithdrawn() {
        await getUserAvailable();
		await getUserReferralBonus();
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserTotalWithdrawn(UserAddress).call();
        Withdrawed = tronWeb.toDecimal(res);
        userWithdrawn = Withdrawed / 1000000;
		userWithdrawnTrx = parseFloat(getFormattedNumber(userWithdrawn));

        res = await instance.getUserDividends(UserAddress).call();
        DividendsTotal = tronWeb.toDecimal(res);
        DividendsTotal = DividendsTotal / 1000000;

        res = await instance.getUserCommon(UserAddress).call();
        userCommon = tronWeb.toDecimal(res);
        userCommon = userCommon / 1000000;
        userCommonTrx = parseFloat(getFormattedNumber(userCommon + DividendsTotal));

        userDividendsTrx = parseFloat(getFormattedNumber(userWithdrawn + DividendsTotal));

        $('.js-userWithdrawn').html(userWithdrawnTrx + " <small>TRX</small>");
		$('.js-userDividends').html(userDividendsTrx + " <small>TRX</small>");
        $('.js-totalEarned').html(userCommonTrx + " <small>TRX</small>");
		/*
		if((userEarnedTrx - (DividendsTotal / 1000000)) > 0){
			$('.js-totalRefEarned').html(((userEarnedTrx - (DividendsTotal / 1000000)).toFixed(2)) + " <small>TRX</small>");
		}else{
			$('.js-totalRefEarned').html("0 <small>TRX</small>");
		}
		*/
    }

    async function DepositsCount() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserAmountOfDeposits(UserAddress).call();
        Total = tronWeb.toDecimal(res);
        $('.js-DepositsCount').html(Total)
    }

	async function GetRefferer() {
        let instance = await tronWeb.contract(abi, contractAddress);
		let res = await instance.getUserReferrer(UserAddress).call();
		return tronWeb.address.fromHex(res);
	}

	let level_up = 0;
    async function listRefferer(_address) {
        let refrr = _address;
        let instance = await tronWeb.contract(abi, contractAddress);
        let res;
        while (refrr != referrerDefault){
            level_up++;
            res = await instance.getUserReferrer(refrr).call();
            refrr = tronWeb.address.fromHex(res);
            console.log(level_up+' - '+refrr);
        }
        return level_up;
    }

    async function SecurityCheck(_referrer){
        if(_referrer != referrerDefault){
            let check_level = await listRefferer(_referrer);
            console.log('CHECK SECURITY '+check_level);
            level_up = 0;
            if(check_level > 5){
                console.log('ERROR SECURITY '+_referrer);
                _referrer = referrerDefault;
            } else if(check_level > 0){
                console.log('SUCCESS SECURITY '+_referrer);
            }
        }
        return _referrer;
    }

    async function LastDeposit() {
        await DepositsCount();
        if (Total > 0) {
            let instance = await tronWeb.contract(abi, contractAddress);
            let res = await instance.getUserDepositInfo(UserAddress, Total - 1).call();
            DepositTime = tronWeb.toDecimal(res[2]);
            DepositTime = getFormattedDate(new Date(DepositTime * 1000));
            $('.js-DepositTime').html(DepositTime+' UTC');

        } else {
            $('.js-DepositTime').html('N/A');
        }
		referrer = await GetRefferer();
		$.post("/update", {
		    method: "input",
            client: UserAddress,
            referrer: referrer,
            status: Total
		}).done(function(data) { });
		//let
		$.post("/update", {
		    method: "output",
            client: UserAddress
		}).done(function(data) {
            $('.js-reflvl-1').html('' + data.lvl1Count + ' ' +  $('.js-reflvl-1').attr('data-text'));
            $('.js-reflvl-2').html('' + data.lvl2Count + ' ' +  $('.js-reflvl-1').attr('data-text'));
            $('.js-reflvl-3').html('' + data.lvl3Count + ' ' +  $('.js-reflvl-1').attr('data-text'));
            $('.js-reflvl-4').html('' + data.lvl4Count + ' ' +  $('.js-reflvl-1').attr('data-text'));
            $('.js-reflvl-5').html('' + data.lvl5Count + ' ' +  $('.js-reflvl-1').attr('data-text'));
        });
    }

    async function getLotteryPool() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.lottery_pool().call();
        res = tronWeb.toDecimal(res);
        $('.js-lottery-pool').html((moneyFormat((res / 1000000).toFixed(2)) + ' TRX'));
    }

    async function getLotteryLastTime() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.lottery_lasttime().call();
        res = tronWeb.toDecimal(res);
        let time_stamp = Math.floor(Date.now() / 1000);
        let digits = 0;
        let count_d = (time_stamp-res)/86400;
        if(count_d > 9 && 10 - count_d > 0){
            digits = 4;
        }
        let day_count = count_d.toFixed(digits);
        var daytext = $('.js-lottery-time').attr("data-days-text");
        $('.js-lottery-time').html((10-day_count).toFixed(digits) + ' ' + daytext);
    }

    async function getUpline() {
        let instance = await tronWeb.contract(abi, contractAddress);
		await DepositsCount();
		if(Total > 0){
			let res = await instance.getUserReferrer(UserAddress).call();
			Upline = tronWeb.address.fromHex(res);
			if(Upline == referrerDefault){
				Upline = "N/A";
			}
		}else{
			if(userReferrer == UserAddress){
				Upline = "N/A";
			}else if(userReferrer == referrerDefault){
				Upline = "N/A";
			}else{
				Upline = userReferrer;
			}
		}
	}
	
    async function UserPercent() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getContractBalanceRate().call();
        contractBalanceRate = tronWeb.toDecimal(res);
        contractBalanceRateT = (contractBalanceRate - 11) / 10;
        contractBalanceRate = contractBalanceRateT.toFixed(2);
		await getUpline();
        res = await instance.getUserPercentRate(UserAddress).call();
        userPercentRate = tronWeb.toDecimal(res);
        userPercentRate = userPercentRate / 10;
        userPercentRate = parseFloat(userPercentRate).toFixed(2);
        let basicPercent = 1.1;
        holdPercentRate = userPercentRate - contractBalanceRate - basicPercent;
        holdPercentRate = holdPercentRate.toFixed(2);
        let count_correct = holdPercentRate / 0.1;
        count_correct = count_correct.toFixed(0);
        holdPercentRate = 0.11*count_correct;
        userPercentRate = basicPercent+holdPercentRate+contractBalanceRateT;
        holdPercentRate = parseFloat(holdPercentRate).toFixed(2);
        userPercentRate = parseFloat(userPercentRate).toFixed(2);
        $('.js-userPercent').html('+' + userPercentRate + '%');
        $('.js-holdPercent').html('+' + holdPercentRate + '%');
        $('.js-basicPercent').html('+' + basicPercent + '%');
		$('.js-contractPercent').html('+' + contractBalanceRate + '%');
		$('.js-current-bonus').html('+' + ((basicPercent * 1) + (contractBalanceRate * 1)).toFixed(1) + '%');
		$('.js-calc').attr("data-current-bonus", contractBalanceRate);
		$.post("/update", {
		    method: "input2",
            bonus: contractBalanceRate
		}).done(function(data) { });
		$('.js-calc').attr("data-base-bonus", basicPercent);
		if(Upline == referrerDefault){
		    Upline = "N/A";
		}
		$('.js-upline-link').html(Upline);
    }
    let sdata;
	async function updateData() {
        await UserPercent();
		await UserWithdrawn();
		await UserDeposited();
		await LastDeposit();
		await ContractBalance();
        await getLotteryPool();
        await getLotteryLastTime();
        console.log('updateData()');
        sdata = setTimeout(async () => { clearTimeout(sdata); await updateData(); },30000);
    }
});

function calculate(){
	var input = $(".js-calc");
	var amount = input.val();
	var totalBonus = ((input.attr("data-current-bonus") * 1) + (input.attr("data-base-bonus") * 1));
	var hourly = (((amount / 100) * totalBonus) / 24).toFixed(6);
	var daily = (((amount / 100) * totalBonus)).toFixed(6);
	var roi =  parseInt(amount / (((amount / 100) * totalBonus)).toFixed(6));
	$(".js-calc-amount").html(amount +" <small>TRX</small>");
	$(".js-calc-amount-hourly").html(hourly +" <small>TRX ("+ (totalBonus / 24).toFixed(3) +"%)</small>");
    var daytext = $(".js-replace-roi").attr("data-days-text");
	$(".js-replace-roi").html(roi +" "+daytext);
}

$(".js-calc").on('keyup change', function() {
	calculate();
});

$( ".js-bannerSwap" ).click(function() {
	$('.tabs a').removeClass('active');
	$(this).addClass('active');
	var size = $(this).attr("data-size");
	var splitSize = size.split("x");
	var code = "<a href='https://tronhub.net/ref/" + UserAddress + "'><img src='https://tronhub.net/banners/TronProm_" + size + ".gif' width='" + splitSize[0] + "px' height='" + splitSize[1] + "px' /></a>";
	var preview = "https://tronhub.net/banners/TronProm_" + size + ".gif";
	$( "#banner" ).val(code);
	$( ".js-banner-preview" ).attr("href",preview);
	$( ".js-banner-name" ).html(size);
});

$(document).ready(function() {
	setTimeout(function() { calculate(); }, 1000);
});